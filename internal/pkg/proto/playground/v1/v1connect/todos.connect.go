// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: playground/v1/todos.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.azuka.me/connect-playground/internal/pkg/proto/playground/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TodoServiceName is the fully-qualified name of the TodoService service.
	TodoServiceName = "azuka.connect.playground.api.v1.TodoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TodoServiceCreateProcedure is the fully-qualified name of the TodoService's Create RPC.
	TodoServiceCreateProcedure = "/azuka.connect.playground.api.v1.TodoService/Create"
	// TodoServiceUpdateProcedure is the fully-qualified name of the TodoService's Update RPC.
	TodoServiceUpdateProcedure = "/azuka.connect.playground.api.v1.TodoService/Update"
	// TodoServiceGetProcedure is the fully-qualified name of the TodoService's Get RPC.
	TodoServiceGetProcedure = "/azuka.connect.playground.api.v1.TodoService/Get"
	// TodoServiceListProcedure is the fully-qualified name of the TodoService's List RPC.
	TodoServiceListProcedure = "/azuka.connect.playground.api.v1.TodoService/List"
	// TodoServiceDeleteProcedure is the fully-qualified name of the TodoService's Delete RPC.
	TodoServiceDeleteProcedure = "/azuka.connect.playground.api.v1.TodoService/Delete"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	todoServiceServiceDescriptor      = v1.File_playground_v1_todos_proto.Services().ByName("TodoService")
	todoServiceCreateMethodDescriptor = todoServiceServiceDescriptor.Methods().ByName("Create")
	todoServiceUpdateMethodDescriptor = todoServiceServiceDescriptor.Methods().ByName("Update")
	todoServiceGetMethodDescriptor    = todoServiceServiceDescriptor.Methods().ByName("Get")
	todoServiceListMethodDescriptor   = todoServiceServiceDescriptor.Methods().ByName("List")
	todoServiceDeleteMethodDescriptor = todoServiceServiceDescriptor.Methods().ByName("Delete")
)

// TodoServiceClient is a client for the azuka.connect.playground.api.v1.TodoService service.
type TodoServiceClient interface {
	Create(context.Context, *connect.Request[v1.TodoServiceCreateRequest]) (*connect.Response[v1.TodoServiceCreateResponse], error)
	Update(context.Context, *connect.Request[v1.TodoServiceUpdateRequest]) (*connect.Response[v1.TodoServiceUpdateResponse], error)
	Get(context.Context, *connect.Request[v1.TodoServiceGetRequest]) (*connect.Response[v1.TodoServiceGetResponse], error)
	List(context.Context, *connect.Request[v1.TodoServiceListRequest]) (*connect.Response[v1.TodoServiceListResponse], error)
	Delete(context.Context, *connect.Request[v1.TodoServiceDeleteRequest]) (*connect.Response[v1.TodoServiceDeleteResponse], error)
}

// NewTodoServiceClient constructs a client for the azuka.connect.playground.api.v1.TodoService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTodoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TodoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &todoServiceClient{
		create: connect.NewClient[v1.TodoServiceCreateRequest, v1.TodoServiceCreateResponse](
			httpClient,
			baseURL+TodoServiceCreateProcedure,
			connect.WithSchema(todoServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v1.TodoServiceUpdateRequest, v1.TodoServiceUpdateResponse](
			httpClient,
			baseURL+TodoServiceUpdateProcedure,
			connect.WithSchema(todoServiceUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.TodoServiceGetRequest, v1.TodoServiceGetResponse](
			httpClient,
			baseURL+TodoServiceGetProcedure,
			connect.WithSchema(todoServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v1.TodoServiceListRequest, v1.TodoServiceListResponse](
			httpClient,
			baseURL+TodoServiceListProcedure,
			connect.WithSchema(todoServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.TodoServiceDeleteRequest, v1.TodoServiceDeleteResponse](
			httpClient,
			baseURL+TodoServiceDeleteProcedure,
			connect.WithSchema(todoServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// todoServiceClient implements TodoServiceClient.
type todoServiceClient struct {
	create *connect.Client[v1.TodoServiceCreateRequest, v1.TodoServiceCreateResponse]
	update *connect.Client[v1.TodoServiceUpdateRequest, v1.TodoServiceUpdateResponse]
	get    *connect.Client[v1.TodoServiceGetRequest, v1.TodoServiceGetResponse]
	list   *connect.Client[v1.TodoServiceListRequest, v1.TodoServiceListResponse]
	delete *connect.Client[v1.TodoServiceDeleteRequest, v1.TodoServiceDeleteResponse]
}

// Create calls azuka.connect.playground.api.v1.TodoService.Create.
func (c *todoServiceClient) Create(ctx context.Context, req *connect.Request[v1.TodoServiceCreateRequest]) (*connect.Response[v1.TodoServiceCreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls azuka.connect.playground.api.v1.TodoService.Update.
func (c *todoServiceClient) Update(ctx context.Context, req *connect.Request[v1.TodoServiceUpdateRequest]) (*connect.Response[v1.TodoServiceUpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Get calls azuka.connect.playground.api.v1.TodoService.Get.
func (c *todoServiceClient) Get(ctx context.Context, req *connect.Request[v1.TodoServiceGetRequest]) (*connect.Response[v1.TodoServiceGetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls azuka.connect.playground.api.v1.TodoService.List.
func (c *todoServiceClient) List(ctx context.Context, req *connect.Request[v1.TodoServiceListRequest]) (*connect.Response[v1.TodoServiceListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Delete calls azuka.connect.playground.api.v1.TodoService.Delete.
func (c *todoServiceClient) Delete(ctx context.Context, req *connect.Request[v1.TodoServiceDeleteRequest]) (*connect.Response[v1.TodoServiceDeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// TodoServiceHandler is an implementation of the azuka.connect.playground.api.v1.TodoService
// service.
type TodoServiceHandler interface {
	Create(context.Context, *connect.Request[v1.TodoServiceCreateRequest]) (*connect.Response[v1.TodoServiceCreateResponse], error)
	Update(context.Context, *connect.Request[v1.TodoServiceUpdateRequest]) (*connect.Response[v1.TodoServiceUpdateResponse], error)
	Get(context.Context, *connect.Request[v1.TodoServiceGetRequest]) (*connect.Response[v1.TodoServiceGetResponse], error)
	List(context.Context, *connect.Request[v1.TodoServiceListRequest]) (*connect.Response[v1.TodoServiceListResponse], error)
	Delete(context.Context, *connect.Request[v1.TodoServiceDeleteRequest]) (*connect.Response[v1.TodoServiceDeleteResponse], error)
}

// NewTodoServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTodoServiceHandler(svc TodoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	todoServiceCreateHandler := connect.NewUnaryHandler(
		TodoServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(todoServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	todoServiceUpdateHandler := connect.NewUnaryHandler(
		TodoServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(todoServiceUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	todoServiceGetHandler := connect.NewUnaryHandler(
		TodoServiceGetProcedure,
		svc.Get,
		connect.WithSchema(todoServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	todoServiceListHandler := connect.NewUnaryHandler(
		TodoServiceListProcedure,
		svc.List,
		connect.WithSchema(todoServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	todoServiceDeleteHandler := connect.NewUnaryHandler(
		TodoServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(todoServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/azuka.connect.playground.api.v1.TodoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TodoServiceCreateProcedure:
			todoServiceCreateHandler.ServeHTTP(w, r)
		case TodoServiceUpdateProcedure:
			todoServiceUpdateHandler.ServeHTTP(w, r)
		case TodoServiceGetProcedure:
			todoServiceGetHandler.ServeHTTP(w, r)
		case TodoServiceListProcedure:
			todoServiceListHandler.ServeHTTP(w, r)
		case TodoServiceDeleteProcedure:
			todoServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTodoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTodoServiceHandler struct{}

func (UnimplementedTodoServiceHandler) Create(context.Context, *connect.Request[v1.TodoServiceCreateRequest]) (*connect.Response[v1.TodoServiceCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("azuka.connect.playground.api.v1.TodoService.Create is not implemented"))
}

func (UnimplementedTodoServiceHandler) Update(context.Context, *connect.Request[v1.TodoServiceUpdateRequest]) (*connect.Response[v1.TodoServiceUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("azuka.connect.playground.api.v1.TodoService.Update is not implemented"))
}

func (UnimplementedTodoServiceHandler) Get(context.Context, *connect.Request[v1.TodoServiceGetRequest]) (*connect.Response[v1.TodoServiceGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("azuka.connect.playground.api.v1.TodoService.Get is not implemented"))
}

func (UnimplementedTodoServiceHandler) List(context.Context, *connect.Request[v1.TodoServiceListRequest]) (*connect.Response[v1.TodoServiceListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("azuka.connect.playground.api.v1.TodoService.List is not implemented"))
}

func (UnimplementedTodoServiceHandler) Delete(context.Context, *connect.Request[v1.TodoServiceDeleteRequest]) (*connect.Response[v1.TodoServiceDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("azuka.connect.playground.api.v1.TodoService.Delete is not implemented"))
}
